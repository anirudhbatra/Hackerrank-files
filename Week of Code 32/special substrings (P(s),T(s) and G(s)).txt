#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <queue>
#include <cstdlib>
#include <ctime>
#include <cassert>

#define pb push_back
#define mp make_pair

#define f first
#define s second

using namespace std;

typedef pair<int, int> pii;
typedef long long ll;

const int N = (int) 1e6 + 7;
const int MOD = (int) 1e9 + 7;

const int M1 = (int) 1e9 + 7;
const int M2 = (int) 1e9 + 9;

struct node {
  int next[26];
  int len;
  int sufflink;
  int num;
};

int n;
char s[N];

int h1[N];
int h2[N];

int p1[N];
int p2[N];

void initHash() {
  p1[0] = 1;
  p2[0] = 1;
  for (int i = 0; i < n; i++) {
    h1[i + 1] = (h1[i] * 1ll * 31 + s[i] - 'a' + 1) % M1;
    p1[i + 1] = (p1[i] * 1ll * 31) % M1;

    h2[i + 1] = (h2[i] * 1ll * 31 + s[i] - 'a' + 1) % M2;
    p2[i + 1] = (p2[i] * 1ll * 31) % M2;
  }
}

int gh1(int l, int r) {
  int res = (h1[r + 1] - h1[l] * 1ll * p1[r - l + 1]) % M1;
  if (res < 0) res += M1;
  return res;
}

int gh2(int l, int r) {
  int res = (h2[r + 1] - h2[l] * 1ll * p2[r - l + 1]) % M2;
  if (res < 0) res += M2;
  return res;
}

bool isSame(int la, int ra, int lb, int rb) {
  return gh1(la, ra) == gh1(lb, rb) && gh2(la, ra) == gh2(lb, rb);
}

node tree[N]; 
int num;      // node 1 - root with len -1, node 2 - root with len 0
int suff;       // max suffix palindrome
long long ans;

int id[N];

bool addLetter(int pos) {
  int cur = suff, curlen = 0;
  int let = s[pos] - 'a';
  while (true) {
    curlen = tree[cur].len;
    if (pos - 1 - curlen >= 0 && s[pos - 1 - curlen] == s[pos])     
      break;  
    cur = tree[cur].sufflink;
  }   
  if (tree[cur].next[let]) {  
    suff = tree[cur].next[let];
    return false;
  }
  num++;
  suff = num;
  tree[num].len = tree[cur].len + 2;
  tree[cur].next[let] = num;
  if (tree[num].len == 1) {
    tree[num].sufflink = 2;
    tree[num].num = 1;
    return true;
  }
  while (true) {
    cur = tree[cur].sufflink;
    curlen = tree[cur].len;
    if (pos - 1 - curlen >= 0 && s[pos - 1 - curlen] == s[pos]) {
      tree[num].sufflink = tree[cur].next[let];
      break;
    }
  }         
  tree[num].num = 1 + tree[tree[num].sufflink].num;
  return true;
}

void initTree() {
  num = 2; suff = 2;
  tree[1].len = -1; tree[1].sufflink = 1;
  tree[2].len = 0; tree[2].sufflink = 1;
}

vector<pii> palindromes;
  
int lcp(int la, int ra, int lb, int rb) {
  int l = 1, r = min(ra - la + 1, rb - lb + 1);
  int res = 0;
  while (l <= r) {
    int mid = (l + r) / 2;
    if (isSame(la, la + mid - 1, lb, lb + mid - 1)) {
      res = mid;
      l = mid + 1;
    } else {
      r = mid - 1;
    }
  }
  return res;
}

int lcp(int a, int b) {
  int la = palindromes[a].f;
  int ra = palindromes[a].s;
  int lb = palindromes[b].f;
  int rb = palindromes[b].s;
  return lcp(la, ra, lb, rb);
}

bool cmp(int la, int ra, int lb, int rb) {
  int len = lcp(la, ra, lb, rb);
  la += len;
  lb += len;
  if (lb > rb)
    return false;
  if (la > ra)
    return true;
  return s[la] < s[lb];
}

set<int> turned;

void turnOn(int pos) {
  //cout << "cur " << pos << endl;
  auto preIter = turned.lower_bound(pos);
  auto nxtIter = turned.upper_bound(pos);
  int pre = -1;
  int nxt = -1;
  if (preIter != turned.begin()) {
    preIter--;
    ans -= lcp(pre = *preIter, pos);
  }
  if (nxtIter != turned.end()) {
    ans -= lcp(nxt = *nxtIter, pos);
  }
  if (pre != -1 && nxt != -1)
    ans += lcp(pre, nxt);

  ans += palindromes[pos].s - palindromes[pos].f + 1;
  turned.insert(pos);
  /* for (auto it : turned) {
    for (int i = palindromes[it].f; i <= palindromes[it].s; i++)
      cout << s[i];
    cout << ' ';
  } */
}

int main() {
  #ifdef LOCAL
  freopen("in.txt", "r", stdin);
  #endif

  scanf("%d\n", &n);
  gets(s);

  initTree();
  initHash();

  for (int i = 0; i < n; i++) {
    addLetter(i);
    palindromes.pb(mp(i - tree[suff].len + 1, i));
  }

  sort(palindromes.begin(), palindromes.end(), [](pii a, pii b) {
    return cmp(a.f, a.s, b.f, b.s);
  });

  for (int i = 0; i < (int) palindromes.size(); i++)
    id[palindromes[i].s] = i;

  for (int i = 0; i < n; i++) {
    turnOn(id[i]);
    printf("%lld\n", ans);
  }
  return 0;
}